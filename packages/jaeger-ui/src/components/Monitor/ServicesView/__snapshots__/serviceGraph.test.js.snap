// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ServiceGraph> "Couldn’t fetch data" displayed 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <div
    className="center-placeholder"
    style={
      Object {
        "height": 168,
        "width": 300,
      }
    }
  >
    Couldn’t fetch data
  </div>
</div>
`;

exports[`<ServiceGraph> "No data" displayed 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <div
    className="center-placeholder"
    style={
      Object {
        "height": 168,
        "width": 300,
      }
    }
  >
    No Data
  </div>
</div>
`;

exports[`<ServiceGraph> Base graph should be displayed  1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <ForwardRef
    height={168}
    width={300}
  >
    <ComposedChart
      barCategoryGap="10%"
      barGap={4}
      data={
        Array [
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
        ]
      }
      layout="horizontal"
      margin={
        Object {
          "bottom": 25,
        }
      }
      reverseStackOrder={false}
      stackOffset="none"
      syncMethod="index"
    >
      <CartesianGrid
        fill="none"
        horizontal={true}
        horizontalFill={Array []}
        horizontalPoints={Array []}
        stroke="#ccc"
        vertical={false}
        verticalFill={Array []}
        verticalPoints={Array []}
      />
      <XAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        dataKey="x"
        domain={
          Array [
            1,
            2,
          ]
        }
        height={30}
        hide={false}
        interval={5}
        mirror={false}
        orientation="bottom"
        padding={
          Object {
            "left": 0,
            "right": 0,
          }
        }
        reversed={true}
        scale="auto"
        tickCount={5}
        tickFormatter={[Function]}
        type="category"
        width={0}
        xAxisId={0}
      />
      <YAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        height={0}
        hide={false}
        mirror={false}
        orientation="left"
        padding={
          Object {
            "bottom": 0,
            "top": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="number"
        width={60}
        yAxisId={0}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={false}
        fill="#DCA3D2"
        fillOpacity={0.1}
        hide={false}
        isAnimationActive={true}
        key="0"
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Line
        activeDot={true}
        animateNewValues={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={true}
        fill="#fff"
        hide={false}
        isAnimationActive={true}
        key="1"
        label={false}
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        strokeWidth={1}
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Tooltip
        active={false}
        allowEscapeViewBox={
          Object {
            "x": false,
            "y": false,
          }
        }
        animationDuration={400}
        animationEasing="ease"
        contentStyle={
          Object {
            "color": "#6b6b76",
            "width": 140,
          }
        }
        coordinate={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        cursor={true}
        cursorStyle={Object {}}
        filterNull={true}
        formatter={[Function]}
        isAnimationActive={true}
        itemStyle={Object {}}
        labelStyle={Object {}}
        offset={10}
        reverseDirection={
          Object {
            "x": false,
            "y": false,
          }
        }
        separator=" : "
        trigger="hover"
        useTranslate3d={false}
        viewBox={
          Object {
            "height": 0,
            "width": 0,
            "x": 0,
            "y": 0,
          }
        }
        wrapperStyle={Object {}}
      />
    </ComposedChart>
  </ForwardRef>
</div>
`;

exports[`<ServiceGraph> Base graph with custom color should be displayed 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <ForwardRef
    height={168}
    width={300}
  >
    <ComposedChart
      barCategoryGap="10%"
      barGap={4}
      data={
        Array [
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
        ]
      }
      layout="horizontal"
      margin={
        Object {
          "bottom": 25,
        }
      }
      reverseStackOrder={false}
      stackOffset="none"
      syncMethod="index"
    >
      <CartesianGrid
        fill="none"
        horizontal={true}
        horizontalFill={Array []}
        horizontalPoints={Array []}
        stroke="#ccc"
        vertical={false}
        verticalFill={Array []}
        verticalPoints={Array []}
      />
      <XAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        dataKey="x"
        domain={
          Array [
            1,
            2,
          ]
        }
        height={30}
        hide={false}
        interval={5}
        mirror={false}
        orientation="bottom"
        padding={
          Object {
            "left": 0,
            "right": 0,
          }
        }
        reversed={true}
        scale="auto"
        tickCount={5}
        tickFormatter={[Function]}
        type="category"
        width={0}
        xAxisId={0}
      />
      <YAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        height={0}
        hide={false}
        mirror={false}
        orientation="left"
        padding={
          Object {
            "bottom": 0,
            "top": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="number"
        width={60}
        yAxisId={0}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={false}
        fill="AAAAAA"
        fillOpacity={0.1}
        hide={false}
        isAnimationActive={true}
        key="0"
        legendType="line"
        points={Array []}
        stroke="AAAAAA"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Line
        activeDot={true}
        animateNewValues={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={true}
        fill="#fff"
        hide={false}
        isAnimationActive={true}
        key="1"
        label={false}
        legendType="line"
        points={Array []}
        stroke="AAAAAA"
        strokeWidth={1}
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Tooltip
        active={false}
        allowEscapeViewBox={
          Object {
            "x": false,
            "y": false,
          }
        }
        animationDuration={400}
        animationEasing="ease"
        contentStyle={
          Object {
            "color": "#6b6b76",
            "width": 140,
          }
        }
        coordinate={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        cursor={true}
        cursorStyle={Object {}}
        filterNull={true}
        formatter={[Function]}
        isAnimationActive={true}
        itemStyle={Object {}}
        labelStyle={Object {}}
        offset={10}
        reverseDirection={
          Object {
            "x": false,
            "y": false,
          }
        }
        separator=" : "
        trigger="hover"
        useTranslate3d={false}
        viewBox={
          Object {
            "height": 0,
            "width": 0,
            "x": 0,
            "y": 0,
          }
        }
        wrapperStyle={Object {}}
      />
    </ComposedChart>
  </ForwardRef>
</div>
`;

exports[`<ServiceGraph> Base graph with horizontal lines should be displayed 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <ForwardRef
    height={168}
    width={300}
  >
    <ComposedChart
      barCategoryGap="10%"
      barGap={4}
      data={
        Array [
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
        ]
      }
      layout="horizontal"
      margin={
        Object {
          "bottom": 25,
        }
      }
      reverseStackOrder={false}
      stackOffset="none"
      syncMethod="index"
    >
      <CartesianGrid
        fill="none"
        horizontal={true}
        horizontalFill={Array []}
        horizontalPoints={Array []}
        stroke="#ccc"
        vertical={false}
        verticalFill={Array []}
        verticalPoints={Array []}
      />
      <XAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        dataKey="x"
        domain={
          Array [
            1,
            2,
          ]
        }
        height={30}
        hide={false}
        interval={5}
        mirror={false}
        orientation="bottom"
        padding={
          Object {
            "left": 0,
            "right": 0,
          }
        }
        reversed={true}
        scale="auto"
        tickCount={5}
        tickFormatter={[Function]}
        type="category"
        width={0}
        xAxisId={0}
      />
      <YAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        height={0}
        hide={false}
        mirror={false}
        orientation="left"
        padding={
          Object {
            "bottom": 0,
            "top": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="number"
        width={60}
        yAxisId={0}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={false}
        fill="#DCA3D2"
        fillOpacity={0.1}
        hide={false}
        isAnimationActive={true}
        key="0"
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Line
        activeDot={true}
        animateNewValues={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={true}
        fill="#fff"
        hide={false}
        isAnimationActive={true}
        key="1"
        label={false}
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        strokeWidth={1}
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Tooltip
        active={false}
        allowEscapeViewBox={
          Object {
            "x": false,
            "y": false,
          }
        }
        animationDuration={400}
        animationEasing="ease"
        contentStyle={
          Object {
            "color": "#6b6b76",
            "width": 140,
          }
        }
        coordinate={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        cursor={true}
        cursorStyle={Object {}}
        filterNull={true}
        formatter={[Function]}
        isAnimationActive={true}
        itemStyle={Object {}}
        labelStyle={Object {}}
        offset={10}
        reverseDirection={
          Object {
            "x": false,
            "y": false,
          }
        }
        separator=" : "
        trigger="hover"
        useTranslate3d={false}
        viewBox={
          Object {
            "height": 0,
            "width": 0,
            "x": 0,
            "y": 0,
          }
        }
        wrapperStyle={Object {}}
      />
    </ComposedChart>
  </ForwardRef>
</div>
`;

exports[`<ServiceGraph> Base graph with legends should be displayed 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <ForwardRef
    height={168}
    width={300}
  >
    <ComposedChart
      barCategoryGap="10%"
      barGap={4}
      data={
        Array [
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
        ]
      }
      layout="horizontal"
      margin={
        Object {
          "bottom": 25,
        }
      }
      reverseStackOrder={false}
      stackOffset="none"
      syncMethod="index"
    >
      <CartesianGrid
        fill="none"
        horizontal={true}
        horizontalFill={Array []}
        horizontalPoints={Array []}
        stroke="#ccc"
        vertical={false}
        verticalFill={Array []}
        verticalPoints={Array []}
      />
      <XAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        dataKey="x"
        domain={
          Array [
            1,
            2,
          ]
        }
        height={30}
        hide={false}
        interval={5}
        mirror={false}
        orientation="bottom"
        padding={
          Object {
            "left": 0,
            "right": 0,
          }
        }
        reversed={true}
        scale="auto"
        tickCount={5}
        tickFormatter={[Function]}
        type="category"
        width={0}
        xAxisId={0}
      />
      <YAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        height={0}
        hide={false}
        mirror={false}
        orientation="left"
        padding={
          Object {
            "bottom": 0,
            "top": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="number"
        width={60}
        yAxisId={0}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={false}
        fill="#DCA3D2"
        fillOpacity={0.1}
        hide={false}
        isAnimationActive={true}
        key="0"
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Line
        activeDot={true}
        animateNewValues={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={true}
        fill="#fff"
        hide={false}
        isAnimationActive={true}
        key="1"
        label={false}
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        strokeWidth={1}
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Tooltip
        active={false}
        allowEscapeViewBox={
          Object {
            "x": false,
            "y": false,
          }
        }
        animationDuration={400}
        animationEasing="ease"
        contentStyle={
          Object {
            "color": "#6b6b76",
            "width": 140,
          }
        }
        coordinate={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        cursor={true}
        cursorStyle={Object {}}
        filterNull={true}
        formatter={[Function]}
        isAnimationActive={true}
        itemStyle={Object {}}
        labelStyle={Object {}}
        offset={10}
        reverseDirection={
          Object {
            "x": false,
            "y": false,
          }
        }
        separator=" : "
        trigger="hover"
        useTranslate3d={false}
        viewBox={
          Object {
            "height": 0,
            "width": 0,
            "x": 0,
            "y": 0,
          }
        }
        wrapperStyle={Object {}}
      />
      <Legend
        align="center"
        formatter={[Function]}
        iconSize={14}
        layout="horizontal"
        margin={
          Object {
            "left": "10px",
          }
        }
        verticalAlign="top"
      />
    </ComposedChart>
  </ForwardRef>
</div>
`;

exports[`<ServiceGraph> Loading indicator is displayed 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <div
    className="center-placeholder"
    style={
      Object {
        "height": 168,
        "width": 300,
      }
    }
  >
    <LoadingIndicator
      centered={true}
      small={false}
    />
  </div>
</div>
`;

exports[`<ServiceGraph> Loading indicator is displayed when xDomain is empty 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <div
    className="center-placeholder"
    style={
      Object {
        "height": 168,
        "width": 300,
      }
    }
  >
    <LoadingIndicator
      centered={true}
      small={false}
    />
  </div>
</div>
`;

exports[`<ServiceGraph> Tooltip hover test 1`] = `null`;

exports[`<ServiceGraph> Tooltip hover test 2`] = `null`;

exports[`<ServiceGraph> Tooltip test 1`] = `
<div
  className="graph-container "
  style={
    Object {
      "height": 242,
    }
  }
>
  <h3
    className="graph-header"
  >
    Hello Graph
  </h3>
  <ForwardRef
    height={168}
    width={300}
  >
    <ComposedChart
      barCategoryGap="10%"
      barGap={4}
      data={
        Array [
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
          Array [
            Object {
              "x": 1631271823806,
              "y": 0.05,
            },
            Object {
              "x": 1631271883806,
              "y": 0.05,
            },
          ],
        ]
      }
      layout="horizontal"
      margin={
        Object {
          "bottom": 25,
        }
      }
      reverseStackOrder={false}
      stackOffset="none"
      syncMethod="index"
    >
      <CartesianGrid
        fill="none"
        horizontal={true}
        horizontalFill={Array []}
        horizontalPoints={Array []}
        stroke="#ccc"
        vertical={false}
        verticalFill={Array []}
        verticalPoints={Array []}
      />
      <XAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        dataKey="x"
        domain={
          Array [
            1,
            2,
          ]
        }
        height={30}
        hide={false}
        interval={5}
        mirror={false}
        orientation="bottom"
        padding={
          Object {
            "left": 0,
            "right": 0,
          }
        }
        reversed={true}
        scale="auto"
        tickCount={5}
        tickFormatter={[Function]}
        type="category"
        width={0}
        xAxisId={0}
      />
      <YAxis
        allowDataOverflow={false}
        allowDecimals={true}
        allowDuplicatedCategory={true}
        height={0}
        hide={false}
        mirror={false}
        orientation="left"
        padding={
          Object {
            "bottom": 0,
            "top": 0,
          }
        }
        reversed={false}
        scale="auto"
        tickCount={5}
        type="number"
        width={60}
        yAxisId={0}
      />
      <Area
        activeDot={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={false}
        fill="#DCA3D2"
        fillOpacity={0.1}
        hide={false}
        isAnimationActive={true}
        key="0"
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Line
        activeDot={true}
        animateNewValues={true}
        animationBegin={0}
        animationDuration={1500}
        animationEasing="ease"
        connectNulls={true}
        dataKey="y"
        dot={true}
        fill="#fff"
        hide={false}
        isAnimationActive={true}
        key="1"
        label={false}
        legendType="line"
        points={Array []}
        stroke="#DCA3D2"
        strokeWidth={1}
        type="monotone"
        xAxisId={0}
        yAxisId={0}
      />
      <Tooltip
        active={false}
        allowEscapeViewBox={
          Object {
            "x": false,
            "y": false,
          }
        }
        animationDuration={400}
        animationEasing="ease"
        contentStyle={
          Object {
            "color": "#6b6b76",
            "width": 140,
          }
        }
        coordinate={
          Object {
            "x": 0,
            "y": 0,
          }
        }
        cursor={true}
        cursorStyle={Object {}}
        filterNull={true}
        formatter={[Function]}
        isAnimationActive={true}
        itemStyle={Object {}}
        labelStyle={Object {}}
        offset={10}
        reverseDirection={
          Object {
            "x": false,
            "y": false,
          }
        }
        separator=" : "
        trigger="hover"
        useTranslate3d={false}
        viewBox={
          Object {
            "height": 0,
            "width": 0,
            "x": 0,
            "y": 0,
          }
        }
        wrapperStyle={Object {}}
      />
    </ComposedChart>
  </ForwardRef>
</div>
`;
